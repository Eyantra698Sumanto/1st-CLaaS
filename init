# One-time initialization of this repository, to be run after cloning.


cd "$( dirname "${BASH_SOURCE[0]}" )"
mkdir -p log
LOG=log/init.log
echo "Logging stdout and stderr to $LOG"

(

# Install submodules.
git submodule update --init --recursive


# Install required packages


# Platform-specific installs.
echo "Installing linux packages."
COMMON_PACKAGES='python-tornado python-imaging make inotify-tools bc remmina verilator jq perl'
if [[ -n "$(which apt-get)" ]]
then
  # Ubuntu
  sudo apt-get update
  sudo apt-get -y install g++ python3 python3-pip python3-pil $COMMON_PACKAGES
  #sudo python3 -m pip install Pillow
elif [[ -n "$(which yum)" ]]
then
  # CentOS
  
  # For Python:
  sudo yum makecache
  sudo yum -y install yum-utils
  sudo yum -y install https://centos7.iuscommunity.org/ius-release.rpm
  sudo yum makecache
  sudo yum -y install python35u python35u-pip
  # To look like Ubuntu, we need python3 and pip3.
  sudo ln -s /usr/bin/python3.5 /usr/bin/python3
  sudo ln -s /usr/bin/pip3.5 /usr/bin/pip3
  
  sudo yum -y install $COMMON_PACKAGES  #  python-tornado python-imaging redundant w/ pip install?
  
  # bash lives at /usr/bin/bash in CentOS, but in /bin/bash for Ubuntu. Create /bin/bash.
  sudo ln -s /usr/bin/bash /bin/bash    # TODO: So far, untested. Test and delete this comment. 
fi


# Install python libraries for user only so as not to affect system installs.
echo "Installing Python packages for user $USER."
python3 -m pip install --upgrade pip
python3 -m pip install --user --upgrade Pillow tornado awscli boto3  # imaging


# Configure remmina to disble the tray icon (so, it isn't left running when launched via Makefile).
if [[ -e "~/.remmina/remmina.pref" ]]
then
  sed 's/^disable_tray_icon=false$/disable_tray_icon=true'
else
  mkdir -p ~/.remmina
  echo [remmina_pref] > ~/.remmina/remmina.pref
  echo 'disable_tray_icon=true' >> ~/.remmina/remmina.pref
fi
# Protect remmina.pref as this contains an encryption key. (No idea why remmina leaves this open.)
# Passwords stored in remmina will be decryptable by anyone with access to this file.
chmod 400 "~/.remmina/remmina.pref"


# Make sure ~/.local/bin is in path for python installs.
#
echo "Making sure Python installs are in \$PATH."
if [[ $( which aws > /dev/null 2>&1 )$? != 0 ]]
then
  # Need to add ~/.local/bin to $PATH.
  echo
  if [[ "$SHELL" == "/bin/bash" ]]
  then
    if [[ -e ~/.bashrc ]]
    then
      if [[ $( grep fpga-webserver ~/.bashrc > /dev/null 2>&1 )$? != 0 ]]
      then
        echo "INFO: Strange, it looks like ~/.bashrc has already been modified, but 'aws' command is not currently in \$PATH. Might need to add ~/.local/bin to your \$PATH manually."
      else
        echo >> ~/.bashrc
        echo "export PATH=\$PATH:$HOME/.local/bin  # Added by fpga-webserver repository." >> ~/.bashrc
        echo "==================================="
        echo "Modified ~/.bashrc to add ~/.local/bin to path, and sourcing ~/.bashrc."
        echo "==================================="
        source ~/.bashrc
        if [[ $( which aws > /dev/null 2>&1 )$? != 0 ]]
        then
          echo "WARNING: Still cannot find 'aws' command."
        fi
      fi
    else
      echo "WARNING: Cannot find ~/.bashrc. You must add ~/.local/bin to your \$PATH manually."
    fi
  else
    echo "NOTE: You must add ~/.local/bin to your \$PATH manually."
  fi
  echo
fi

# Download Terraform binary.
if [[ ! -d terraform ]]
then
  mkdir terraform
  ( cd terraform && \
    curl https://releases.hashicorp.com/terraform/0.12.4/terraform_0.12.4_linux_amd64.zip > terraform.zip \
    && unzip terraform.zip \
    && rm terraform.zip \
    && chmod +x terraform )
fi
# Note that framework/Makefile and bin/regress use the existence of terraform/terraform to indicate that this script was run.

) |& tee $LOG
