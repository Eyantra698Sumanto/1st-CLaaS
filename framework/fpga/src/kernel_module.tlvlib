\m4_TLV_version 1d: tl-x.org
\SV
// This TL-Verilog library defines macros useful for developing using the 1st CLaaS Framework.

// The kernel module definition one-liner. (Currently there's no good solution for a multi-line outside of \TLV. Could put a multiline SV macro in a .vh file.
m4_define(['m4_kernel_module'], ['module $1 #(parameter integer C_DATA_WIDTH = 512) (input wire clk, input wire reset, output wire in_ready, input wire in_avail, input wire  [C_DATA_WIDTH-1:0]   in_data, input wire out_ready, output wire out_avail, output wire [C_DATA_WIDTH-1:0] out_data);'])

// Macro that defines the necessary kernel module interface and provides a streaming interface compatible with the
// https://github.com/stevehoover/tlv_flow_lib. By default, the provided TLV interface is:
//   |input  // kernel input (shell output)
//      @1
//         $reset = *reset;
//         $avail = *in_avail;
//         ?$avail
//            $in_data[C_DATA_WIDTH:0] = *in_data;
//         *in_ready = ! $blocked;
//   |output  // kernel output (shell input)
//      @1
//         $blocked = ! *out_ready;
//         *out_avail = $avail;
//         ?$avail
//            *out_data = $data;

// Sample usage:
// A kernel that passed data through directly:
//
// \SV
//    m4_kernel_module(empty_kernel)
// \TLV
//    m4+kernel_flow_shell(|kernel, @1, |kernel, @1);
// \SV
//    endmodule
//
// Or, more illustrative, explicitly connecting default |input and |output:
//
// \SV
//    m4_kernel_module(empty_kernel)
// \TLV
//    m4+kernel_flow_shell()
//    |input
//       @1
//          $blocked = /top|output<>0$blocked;
//    |output
//       @1
//          $avail = /top|input<>0$avail;
//          ?$avail
//             /trans
//                $data[511:0] = /top|input<>0$data;
// \SV
//    endmodule
//
// The tlv_flow_lib can be used to create other kernel microarchitectures. For example, this creates
// a kernel with a 3-stage backpressured pipeline from input to output. (It just passes the data along, but,
// of course, with TLV, we can operate on it within |kernel<0-3>@1/trans).
// \SV
//    m4_kernel_module(empty_kernel)
// m4+flow_shell(|kernel0, @1, |kernel3, @1, /trans)
// \TLV
//    m4+bp_pipeline(/top, |kernel, 0, 3, /trans)
// \SV
//    endmodule
//
\TLV flow_shell(|_in_pipe, @_in_at, |_out_pipe, @_out_at, /_trans)
   m4_pushdef(['m4_in_pipe'], m4_ifelse(|_in_pipe, [''], input, |_in_pipe))
   m4_pushdef(['m4_in_at'], m4_ifelse(@_in_at, [''], @1, @_in_at))
   m4_pushdef(['m4_out_pipe'], m4_ifelse(|_out_pipe, [''], output, |_out_pipe))
   m4_pushdef(['m4_out_at'], m4_ifelse(@_out_at, [''], @1, @_out_at))
   m4_pushdef(['m4_trans_ind'], m4_ifelse(/_trans, [''], [''], ['   ']))
   
   m4_in_pipe
      m4_in_at
         $reset = *reset;  // TODO: Take this a cycle earlier.
         $avail = *in_avail;
         ?$avail
            /_trans
         m4_trans_ind   $in_data[C_DATA_WIDTH-1:0] = *in_data;
         *in_ready = ! $blocked;
   m4_out_pipe
      m4_out_at
         $blocked = ! *out_ready;
         $accepted = $avail && ! $blocked;
         `BOGUS_USE($accepted)
         *out_avail = $avail;
         ?$avail
            /_trans
         m4_trans_ind   *out_data = $out_data;
