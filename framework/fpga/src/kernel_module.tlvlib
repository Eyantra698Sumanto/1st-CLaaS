// This TL-Verilog library defines macros useful for developing using the 1st CLaaS Framework.

// Macro that defines the necessary kernel module interface and provides a streaming interface compatible with the
// https://github.com/stevehoover/tlv_flow_lib. By default, the provide TLV interface is:
//   |input
//      @1
//         $avail = *in_avail;
//         ?$avail
//            $in_data[C_DATA_WIDTH:0] = *in_data;
//         *in_ready = ! $blocked;
//   |output
//      @1
//         $blocked = ! *out_ready;
//         *out_avail = $avail;
//         ?$avail
//            *out_data = $data;

// Sample usage:
// A kernel that passed data through directly:
//
// \SV
//    m4+kernel_flow_module(empty_kernel, |kernel, @1, |kernel, @1);
// \SV
//    endmodule
//
// Or, more illustrative, explicitly connecting default |input and |output:
//
// \SV
//    m4+kernel_flow_module(empty_kernel)
// \TLV
//    |input
//       @1
//          $blocked = /top|output<>0$blocked;
//    |output
//       @1
//          $avail = /top|input<>0$avail;
//          ?$avail
//             /trans
//                $data[511:0] = /top|input<>0$data;
// \SV
//    endmodule
//
// The tlv_flow_lib can be used to create other kernel microarchitectures. For example, this creates
// a kernel with a 3-stage backpressured pipeline from input to output. (It just passes the data along, but,
// of course, with TLV, we can operate on it within |kernel<0-3>@1/trans).
// m4+kernel_flow_module(|kernel0, @1, |kernel3, @1, /trans)
// \TLV
//    m4+bp_pipeline(bp_kernel, /top, |kernel, 0, 3, /trans)
// \SV
//    endmodule
\TLV kernel_flow_module(module_name, |_in_pipe, @_in_at, |_out_pipe, @_out_at, /_trans)
   m4_pushdef(['m4_in_pipe'], m4_ifelse(|_in_pipe, [''], input, ['']))
   m4_pushdef(['m4_in_at'], m4_ifelse(|_in_at, [''], 1, ['']))
   m4_pushdef(['m4_out_pipe'], m4_ifelse(|_out_pipe, [''], output, ['']))
   m4_pushdef(['m4_out_at'], m4_ifelse(|_out_at, [''], 1, ['']))
   m4_pushdef(['m4_trans_ind'], m4_ifelse(/_trans, [''], [''], ['   ']))
   module module_name #(
       parameter integer C_DATA_WIDTH = 512 // Data width of both input and output data
   )
   (
       input wire                       clk,
       input wire                       reset,
       
       output wire                      in_ready,
       input wire                       in_avail,
       input wire  [C_DATA_WIDTH-1:0]   in_data,
       
       input wire                       out_ready,
       output wire                      out_avail,
       output wire [C_DATA_WIDTH-1:0]   out_data
   );
   
   /TLV
      |m4_in_pipe
         @m4_in_at
            $avail = *in_avail;
            ?$avail
               /_trans
            m4_trans_ind   $in_data[C_DATA_WIDTH:0] = *in_data;
            *in_ready = ! $blocked;
      |m4_out_pipe
         @m4_out_at
            $blocked = ! *out_ready;
            *out_avail = $avail;
            ?$avail
               /_trans
            m4_trans_ind   *out_data = $out_data;